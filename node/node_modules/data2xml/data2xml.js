// --------------------------------------------------------------------------------------------------------------------
//
// data2xml.js - A data to XML converter with a nice interface (for NodeJS).
//
// Copyright (c) 2011 AppsAttic Ltd - http://www.appsattic.com/
// Written by Andrew Chilton <chilts@appsattic.com>
//
// License: http://opensource.org/licenses/MIT
//
// --------------------------------------------------------------------------------------------------------------------

var xmlHeader = '<?xml version="1.0" encoding="utf-8"?>\n';

function entitify(str) {
//	console.log('emtitigy:'+str);
    str = ''+str;
//    console.log('1 emtitigy:'+str);
    str = str
        .replace(/&/g, '&amp;')
        .replace(/</g,'&lt;')
        .replace(/>/g,'&gt;')
        .replace(/'/g, '&apos;')
        .replace(/"/g, '&quot;');
    return str;
}

function makeStartTag(name, attr) {
    attr = attr || {};
    var tag = '<' + name;
    for(var a in attr) {
        tag += ' ' + a + '="' + entitify(attr[a]) + '"';
    }
    tag += '>';
    return tag;
}

function makeEndTag(name) {
    return '</' + name + '>';
}

function makeElement(name, data) {
    var element = '';
    if ( Array.isArray(data) || Object.prototype.toString.apply(data) === '[object Array]') {
        data.forEach(function(v) {
            element += makeElement(name, v);
        });
        return element;
    }
    else if ( typeof data === 'object' ) {
        console.log('tag:'+name+', type:'+Object.prototype.toString.apply(data));
        element += makeStartTag(name, data._attr);
        if ( data._value ) {
            element += entitify(data._value);
        }
        else if(Object.prototype.toString.apply(data) === '[object Object]'){
            for (var el in data) {
                if ( el === '_attr' ) {
                    continue;
                }
                element += makeElement(el, data[el]);
            }
        }
//        	else if(typeof data.toString === 'function'){
//        	element += entitify(data.toString());
//      	}
//        console.log('ele:'+element);
        element += makeEndTag(name);
        return element;
    }
    else {
        // a piece of data on it's own can't have attributes
//    	console.log('name:'+name+', value:'+data+', type:'+typeof data);
//    	if(typeof data === 'string'){
    		return makeStartTag(name) + entitify(data) + makeEndTag(name);
//    	}else
//    		console.log('non string:'+name);
//    		return '';
    		
    }
    throw "Unknown data " + data;
}

var data2xml = function(name, data) {
    var xml = xmlHeader;
    xml += makeElement(name, data);
    return xml;
};

// --------------------------------------------------------------------------------------------------------------------

exports.entitify = entitify;
exports.makeStartTag = makeStartTag;
exports.makeEndTag = makeEndTag;
exports.makeElement = makeElement;
exports.data2xml = data2xml;

// --------------------------------------------------------------------------------------------------------------------
