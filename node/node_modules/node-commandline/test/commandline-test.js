/*
 * Test for the smart command-line parser.
 */

var CommandLine = require("../lib/commandline.js").CommandLine;

var commandLineTest = function (test) {
    var commandLine = new CommandLine('test1');

    commandLine.addArgument('test', {required : true, type : 'string', allowedValues : ['a', 'b']}).addArgument('optional', {type : 'boolean'}).addArgument('optional2', {required : false}).addArgument('value', {required : true, type : 'number'}).addArgument('source', {required : true, order : 0}).addArgument('target', {required : true, order : 1}).addArgument('silent', {required : true}).addArgument('x', {type : 'object'}).addArgument('input', {sequenced : true, required : true, type : 'string'});

    console.log("Syntax: %s", commandLine);

    var command = commandLine.parseNode(process.argv[0], process.argv[1], "-test:a", "-input", "INPUT", "-optional:true", "-optional2:false", "-value:45", "source", "target", "-silent", '-x:{"name":"test"}');

    test.equal(command['test'], 'a');
    test.equal(command['optional'], true);
    test.equal(command['optional2'], false);
    test.equal(command['value'], 45);
    test.equal(command['source'], "source");
    test.equal(command['target'], "target");
    test.equal(command['silent'], true);
    test.equal(command['input'], 'INPUT');
    test.equal(command.orderedArguments[0], "source");
    test.equal(command.orderedArguments[1], "target");
    test.equal(command['source'], command.orderedArguments[0]);
    test.equal(command['target'], command.orderedArguments[1]);
    test.equal(command['x'].name, 'test');
    test.done();
};

var testSyntax = function (test) {
    var commandLine = new CommandLine('test2');

    commandLine.addArgument('option1'); // Boolean option1, assumed optional.
    commandLine.addArgument('option2', {required : true}); // Boolean option2, required.
    commandLine.addArgument('option3', {type : 'string'}); // A string argument. Optional.
    commandLine.addArgument('option4', {type : 'number', allowedValues : [0, 1, 2]}); // optional numeric 'option4', with allowed options 0, 1 and 2.
    commandLine.addArgument('source', {type : 'string', required : true, sequenced : true}); // required string argument 'source', in sequenced notation.
    commandLine.addArgument('target', {type : 'string', required : true, order : 0}); // First unnamed argument is the target.

    console.log("Syntax: %s", commandLine);
    test.equal('test2 [-option1[:<{true|false}>]] -option2[:<{true|false}>] [-option3:<string>] [-option4:<{0|1|2}>] -source <string> <target(string)>', commandLine.toString());
    test.done();
};

module.exports.commandLineTests = {
    testCommandLine : commandLineTest,
    testSyntax : testSyntax
};